{"version":3,"sources":["components/PersonForm.js","components/Filter.js","components/Persons.js","services/persons.js","App.js","index.js"],"names":["PersonForm","newName","handleNewName","newNumber","handleNewNumber","addPerson","onSubmit","value","onChange","type","className","Filter","filter","handleFilter","Person","name","number","Persons","persons","handleDelete","map","person","onClick","id","baseUrl","pService","getAll","axios","get","then","response","data","create","newObject","post","update","put","remove","delete","Notification","message","success","text","App","useState","setPersons","setNewName","setNewNumber","setFilter","setMessage","useEffect","initialPersons","personsToShow","toLowerCase","includes","event","target","preventDefault","personObj","some","window","confirm","forEach","updated","p","catch","error","setTimeout","newPerson","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.34952b40.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst PersonForm = ({newName, handleNewName, newNumber, handleNewNumber, addPerson}) => {\r\n    return (\r\n        <form onSubmit={addPerson}>\r\n            <div>\r\n                name: <input value={newName} onChange={handleNewName} />\r\n            </div>\r\n            <div>\r\n                number: <input value={newNumber} onChange={handleNewNumber} />\r\n            </div>\r\n            <div>\r\n                <button type='submit' className='addBtn'>add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PersonForm\r\n","import React from 'react'\r\n\r\nconst Filter = ({filter, handleFilter}) => {\r\n    return <div className='filter'>filter by name <input value={filter} onChange={handleFilter} /></div>\r\n}\r\n\r\nexport default Filter\r\n","import React from 'react'\r\n\r\nconst Person = ({name, number}) => {\r\n    return `${name} ${number} `\r\n}\r\n\r\nconst Persons = ({persons, handleDelete}) => {\r\n    return (<p>{persons.map(\r\n        person => <span key={person.name}><Person name={person.name} number={person.number} />\r\n        <button type='button' onClick={() => handleDelete(person.id)}>delete</button>\r\n        <br/></span>\r\n    )}</p>)\r\n}\r\n\r\nexport default Persons\r\n","import axios from 'axios'\r\nconst baseUrl = 'api/persons'\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl).then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    return axios.post(baseUrl, newObject).then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, newObject).then(response => response.data)\r\n}\r\n\r\nconst remove = id => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nconst pService = { getAll, create, update, remove }\r\n\r\nexport default pService\r\n","import React, { useState, useEffect } from 'react';\r\nimport PersonForm from './components/PersonForm';\r\nimport Filter from './components/Filter';\r\nimport Persons from './components/Persons';\r\nimport pService from './services/persons'\r\n\r\nconst Notification = ({message}) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n    if (message.success) {\r\n        return (\r\n            <div className='success'>\r\n                {message.text}\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className='error'>\r\n                {message.text}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst App = () => {\r\n    const [ persons, setPersons ] = useState([])\r\n    const [ newName, setNewName ] = useState('')\r\n    const [ newNumber, setNewNumber ] = useState('')\r\n    const [ filter, setFilter ] = useState('')\r\n    const [ message, setMessage ] = useState(null)\r\n\r\n    useEffect(() => {\r\n        pService.getAll().then(initialPersons => {\r\n            setPersons(initialPersons)\r\n        })\r\n    }, [])\r\n\r\n    const handleNewName = event => {\r\n        setNewName(event.target.value)\r\n    }\r\n    const handleNewNumber = event => {\r\n        setNewNumber(event.target.value)\r\n    }\r\n    const handleFilter = event => {\r\n        setFilter(event.target.value)\r\n    }\r\n\r\n    const personsToShow = persons.filter(\r\n        person => person.name.toLowerCase().includes(filter.toLowerCase())\r\n    )\r\n\r\n    const addPerson = event => {\r\n        event.preventDefault()\r\n        const personObj = {\r\n            name: newName,\r\n            number: newNumber\r\n        }\r\n        if (persons.some(person => person.name === newName)) {\r\n            if (window.confirm(`${newName} is already added to phonebook. Replace the old number?`)) {\r\n                persons.forEach(person => {\r\n                    if (person.name === newName) {\r\n                        pService.update(person.id, personObj).then(updated => {\r\n                            setPersons(persons.map(p => p.id !== person.id ? p : updated))\r\n                        }).catch(error => {\r\n                            setMessage({text: error.response.data.error, success: false})\r\n                            setTimeout(() => setMessage(null), 5000)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            pService.create(personObj).then(newPerson => {\r\n                setPersons(persons.concat(newPerson))\r\n                setMessage({text: `Added ${newName}`, success: true})\r\n            }).catch(error => {\r\n                setMessage({text: error.response.data.error, success: false})\r\n            })\r\n            setTimeout(() => setMessage(null), 5000)\r\n        }\r\n        setNewName('')\r\n        setNewNumber('')\r\n    }\r\n\r\n    const handleDelete = id => {\r\n        if (window.confirm('Delete?'))\r\n            pService.remove(id).then(() => setPersons(persons.filter(person => person.id !== id)))\r\n                .catch(() => {\r\n                    setMessage({text: 'Could not delete. Try again', success: false})\r\n                    setTimeout(() => setMessage(null), 5000)\r\n                })\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <Notification message={message} />\r\n            <h2>Phonebook</h2>\r\n            <Filter filter={filter} handleFilter={handleFilter} />\r\n            <h3>add a contact</h3>\r\n            <PersonForm newName={newName} handleNewName={handleNewName} newNumber={newNumber}\r\n                        handleNewNumber={handleNewNumber} addPerson={addPerson} />\r\n            <h3>contacts</h3>\r\n            <Persons persons={personsToShow} handleDelete={handleDelete} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}